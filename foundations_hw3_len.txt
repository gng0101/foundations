#HW3: Parsing the Len Function in Python

# Found this very question answered on Stack Overflow here: http://stackoverflow.com/questions/16249418/how-python-count-list-length

# It first checks for the object size (space currently in use) and ensures that it is greater than zero but less than what is allocated for elements.
# Then it checks a list to evaluate it as equivalent to the object size.
# Then it looks at object item which contains the space for allocated elements and if it is a null value, then there is no length.
# Basically, len provides the object size and according to this great documenter, it is in constant-time operation.

# Some other good sources for future reference:
# https://docs.python.org/2/library/functions.html


list is implemented in ./Include/listobject.h and ./Objects/listobject.c.



typedef struct {
    PyObject_VAR_HEAD
    /* Vector of pointers to list elements.  list[0] is ob_item[0], etc. */
    PyObject **ob_item;

    /* ob_item contains space for 'allocated' elements.  The number
     * currently in use is ob_size.
     * Invariants:
     *     0 <= ob_size <= allocated
     *     len(list) == ob_size
     *     ob_item == NULL implies ob_size == allocated == 0
     * list.sort() temporarily sets allocated to -1 to detect mutations.
     *
     * Items must normally not be NULL, except during construction when
     * the list is not yet visible outside the function that builds it.
     */
    Py_ssize_t allocated;
} PyListObject;
list.__len__() just consults ob_size, which is part of PyObject_VAR_HEAD. This makes len() a constant-time operation for lists.

